package openrouter

import (
	"github.com/charmbracelet/fantasy/ai"
)

const Name = "openrouter"

type ReasoningEffort string

const (
	ReasoningEffortLow    ReasoningEffort = "low"
	ReasoningEffortMedium ReasoningEffort = "medium"
	ReasoningEffortHigh   ReasoningEffort = "high"
)

type ProviderMetadata struct{}

func (*ProviderMetadata) Options() {}

type ReasoningOptions struct {
	// Whether reasoning is enabled
	Enabled *bool `json:"enabled"`
	// Whether to exclude reasoning from the response
	Exclude *bool `json:"exclude"`
	// Maximum number of tokens to use for reasoning
	MaxTokens *int64 `json:"max_tokens"`
	// Reasoning effort level: "low" | "medium" | "high"
	Effort *ReasoningEffort `json:"effort"`
}

type Provider struct {
	// List of provider slugs to try in order (e.g. ["anthropic", "openai"])
	Order []string `json:"order"`
	// Whether to allow backup providers when primary is unavailable (default: true)
	AllowFallbacks *bool `json:"allow_fallbacks"`
	// Only use providers that support all parameters in your request (default: false)
	RequireParameters *bool `json:"require_parameters"`
	// Control whether to use providers that may store data: "allow" | "deny"
	DataCollection *string `json:"data_collection"`
	// List of provider slugs to allow for this request
	Only []string `json:"only"`
	// List of provider slugs to skip for this request
	Ignore []string `json:"ignore"`
	// List of quantization levels to filter by (e.g. ["int4", "int8"])
	Quantizations []string `json:"quantizations"`
	// Sort providers by "price" | "throughput" | "latency"
	Sort *string `json:"sort"`
}

type ProviderOptions struct {
	Reasoning    *ReasoningOptions `json:"reasoning"`
	ExtraBody    map[string]any    `json:"extra_body"`
	IncludeUsage *bool             `json:"include_usage"`
	// Modify the likelihood of specified tokens appearing in the completion.
	// Accepts a map that maps tokens (specified by their token ID) to an associated bias value from -100 to 100.
	// The bias is added to the logits generated by the model prior to sampling.
	LogitBias map[string]int64 `json:"logit_bias"`
	// Return the log probabilities of the tokens. Including logprobs will increase the response size.
	// Setting to true will return the log probabilities of the tokens that were generated.
	LogProbs *bool `json:"log_probs"`
	// Whether to enable parallel function calling during tool use. Default to true.
	ParallelToolCalls *bool `json:"parallel_tool_calls"`
	// A unique identifier representing your end-user, which can help OpenRouter to monitor and detect abuse.
	User *string `json:"user"`
	// Provider routing preferences to control request routing behavior
	Provider *Provider `json:"provider"`
	// TODO: add the web search plugin config
}

func (*ProviderOptions) Options() {}

func ReasoningEffortOption(e ReasoningEffort) *ReasoningEffort {
	return &e
}

func NewProviderOptions(opts *ProviderOptions) ai.ProviderOptions {
	return ai.ProviderOptions{
		Name: opts,
	}
}
